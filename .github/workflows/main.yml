name: Auto Merge Main to Test

on:
  push:
    branches:
      - main

jobs:
  merge-main-to-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure Git user (required for merge)
      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # Fetch all branches
      - name: Fetch all branches
        run: git fetch --all

      # Ensure test branch exists or create it
      - name: Ensure test branch exists
        run: |
          git branch -r | grep "origin/test" || git checkout -b test origin/main

      # Merge Main into Test (excluding conflicted files)
      - name: Merge Main into Test
        id: merge
        run: |
          set -e
          git checkout test
          git fetch origin main
          # Merge branch 'main' into 'test'
          git merge origin/main --no-commit --allow-unrelated-histories --no-ff || true
          # Detect conflicts
          if git ls-files -u | grep -q ""; then
            echo "Conflicts detected!"
            CONFLICT_FILES=$(git diff --name-only --diff-filter=U)
            echo "::set-output name=conflict_files::$CONFLICT_FILES"
            # Resolve conflicts by keeping current branch versions
            for file in $CONFLICT_FILES; do
              git checkout --ours -- "$file"
              git add "$file"
            done
          fi
          # Commit resolved files
          git commit -m "Merge main into test (excluding conflicted files)" || true
          git push origin test || true

  notify-discord:
    runs-on: ubuntu-latest
    needs: merge-main-to-test
    if: always() # Always run this job
    steps:
      - name: Notify Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          JOB_STATUS: ${{ needs.merge-main-to-test.result }}
        run: |
          if [ "$JOB_STATUS" == "failure" ]; then
            MESSAGE="üö® **Job Failed:** \`merge-main-to-test\`\n- **Status:** \`Failure\`\n- **Branch:** \`main\` ‚Üí \`test\`\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\nPlease review the workflow logs for details."
          elif [ "$JOB_STATUS" == "success" ]; then
            MESSAGE="‚úÖ **Workflow completed successfully!**\n- **Job:** \`merge-main-to-test\`\n- **Branch:** \`main\` ‚Üí \`test\`\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')."
          else
            MESSAGE="‚ö†Ô∏è **Workflow completed with warnings.**\n- **Job:** \`merge-main-to-test\`\n- **Status:** \`$JOB_STATUS\`\n- **Branch:** \`main\` ‚Üí \`test\`\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\nPlease check the logs for details."
          fi

          curl -X POST -H "Content-Type: application/json" \
          -d "{
            \"content\": \"$MESSAGE\"
          }" \
          $DISCORD_WEBHOOK_URL
