name: Auto Merge Main to Test

on:
  push:
    branches:
      - main

jobs:
  merge-main-to-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Ensure test branch exists
        run: |
          git branch -r | grep "origin/test" || git checkout -b test origin/main

      - name: Merge Main into Test
        id: merge
        run: |
          set -e
          git checkout test
          git fetch origin main
          echo "Attempting to merge 'main' into 'test'..."
          git merge origin/main --no-commit --allow-unrelated-histories --no-ff || true
          # Check for conflicts
          if git ls-files -u | grep -q ""; then
            echo "Conflicts detected!"
            CONFLICT_FILES=$(git diff --name-only --diff-filter=U | tr '\n' ',' | sed 's/,$//')
            echo "conflict_files=$CONFLICT_FILES" >> $GITHUB_ENV
          else
            echo "No conflicts detected." >> $GITHUB_ENV
          fi
          echo "Merge status: Completed"
          if [ -n "$CONFLICT_FILES" ]; then
            echo "Conflicted files: $CONFLICT_FILES"
            for file in $(echo $CONFLICT_FILES | tr ',' ' '); do
              git checkout --ours -- "$file"
              git add "$file"
            done
          fi
          git commit -m "Merge main into test (excluding conflicted files)" || true
          git push origin test || true

      - name: Save logs
        if: failure()
        run: |
          mkdir -p logs
          echo "Git log output:" > logs/error_log.txt
          git status >> logs/error_log.txt 2>&1
          git diff >> logs/error_log.txt 2>&1
          echo "Error log saved to logs/error_log.txt"
          cat logs/error_log.txt  # In log ra console ƒë·ªÉ ki·ªÉm tra

      - name: Send logs to Discord
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Escape special characters to make sure the JSON is valid
          LOG_CONTENT=$(cat logs/error_log.txt)
          ESCAPED_LOG_CONTENT=$(echo "$LOG_CONTENT" | jq -R -s .)

          MESSAGE="üö® **Merge Process Failed**\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\n### Logs:\n\`\`\`\n$ESCAPED_LOG_CONTENT\n\`\`\`"
          
          curl -X POST -H "Content-Type: application/json" \
          -d "{
            \"content\": \"$MESSAGE\"
          }" \
          $DISCORD_WEBHOOK_URL

  notify-discord:
    runs-on: ubuntu-latest
    needs: merge-main-to-test
    if: always()
    steps:
      - name: Notify Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          JOB_STATUS: ${{ needs.merge-main-to-test.result }}
        run: |
          if [ "$JOB_STATUS" == "failure" ]; then
            MESSAGE="üö® **Job Failed:** \`merge-main-to-test\`\n- **Status:** \`Failure\`\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\nPlease review the logs for details."
          elif [ "$JOB_STATUS" == "success" ]; then
            MESSAGE="‚úÖ **Workflow completed successfully!**\n- **Job:** \`merge-main-to-test\`\n- **Branch:** \`main\` ‚Üí \`test\`\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')."
          else
            MESSAGE="‚ö†Ô∏è **Workflow completed with warnings.**\n- **Job:** \`merge-main-to-test\`\n- **Status:** \`$JOB_STATUS\`\n- **Branch:** \`main\` ‚Üí \`test\`\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\nPlease check the logs for details."
          fi

          curl -X POST -H "Content-Type: application/json" \
          -d "{
            \"content\": \"$MESSAGE\"
          }" \
          $DISCORD_WEBHOOK_URL
