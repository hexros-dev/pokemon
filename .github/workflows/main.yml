name: Auto Merge Main to Test

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  merge-main-to-test:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: sudo apt-get install jq

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Ensure test branch exists
        run: |
          git branch -r | grep "origin/test" || git checkout -b test origin/main

      - name: Merge Main into Test
        id: merge
        run: |
          set -e
          git checkout test
          git fetch origin main
          echo "Attempting to merge 'main' into 'test'..."
          git merge origin/main --no-commit --allow-unrelated-histories --no-ff || true
          # Check for conflicts
          # if git ls-files -u | grep -q ""; then
          #   echo "Conflicts detected!"
          #   CONFLICT_FILES=$(git diff --name-only --diff-filter=U | tr '\n' ',' | sed 's/,$//')
          #   echo "conflict_files=$CONFLICT_FILES" >> $GITHUB_ENV
          # else
          #   echo "No conflicts detected." >> $GITHUB_ENV
          # fi
          # echo "Merge status: Completed"
          # if [ -n "$CONFLICT_FILES" ]; then
          #   echo "Conflicted files: $CONFLICT_FILES"
          #   for file in $(echo $CONFLICT_FILES | tr ', ' ' '); do
          #     git checkout --ours -- "$file"
          #     git add "$file"
          #   done
          # fi
          if git ls-files -u | grep -q ""; then
            echo "Conflicts detected!"
            CONFLICT_FILES=$(git diff --name-only --diff-filter=U | tr '\n' ', ' | sed 's/,$//')
            echo "conflict_files=$CONFLICT_FILES" >> $GITHUB_ENV
          else
            echo "conflict_files=" >> $GITHUB_ENV
          fi
          echo "Merge status: Completed"
          if [ -n "$CONFLICT_FILES" ]; then
            echo "Conflicted files: $CONFLICT_FILES"
            for file in $(echo $CONFLICT_FILES | tr ', ' ' '); do
              git checkout --ours -- "$file"
              git add "$file"
            done
          fi
          git commit -m "Merge main into test (excluding conflicted files)" || true
          git push origin test || true

      - name: Save logs
        if: failure()
        run: |
          mkdir -p logs
          echo "Git log output:" > logs/error_log.txt
          git status >> logs/error_log.txt 2>&1
          git diff >> logs/error_log.txt 2>&1
          echo "Error log saved to logs/error_log.txt"
          cat logs/error_log.txt  # In log ra console ƒë·ªÉ ki·ªÉm tra

      # - name: Send logs to Discord
      #   if: failure()
      #   env:
      #     DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      #   run: |
      #     # L·∫•y log chi ti·∫øt c·ªßa c√°c file b·ªã xung ƒë·ªôt
      #     CONFLICT_FILES=$(git diff --name-only --diff-filter=U)
      #     CONFLICT_DETAILS=""
          
      #     for FILE in $CONFLICT_FILES; do
      #       CONFLICT_DETAILS="$CONFLICT_DETAILS\n\n**$FILE**:\n"
      #       CONFLICT_LINES=$(git diff $FILE | grep -E '^\+|^-' | tail -n 20) # L·∫•y 20 d√≤ng xung ƒë·ªôt g·∫ßn nh·∫•t
      #       CONFLICT_DETAILS="$CONFLICT_DETAILS$CONFLICT_LINES"
      #     done
      
      #     # Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong chu·ªói JSON
      #     # ESCAPED_CONFLICT_DETAILS=$(echo "$CONFLICT_DETAILS" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
      
      #     # X√¢y d·ª±ng th√¥ng b√°o Discord v·ªõi JSON h·ª£p l·ªá
      #     MESSAGE="üö® **Merge Conflict Detected**\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\n### Conflicted Files and Details:\n$CONFLICT_DETAILS"
          
      #     # Ki·ªÉm tra log tr∆∞·ªõc khi g·ª≠i
      #     echo "Sending the following message to Discord:"
      #     echo "$MESSAGE"
      
      #     # S·ª≠ d·ª•ng jq ƒë·ªÉ t·∫°o JSON h·ª£p l·ªá (ki·ªÉm tra c√∫ ph√°p JSON)
      #     JSON_PAYLOAD=$(jq -n \
      #       --arg content "$MESSAGE" \
      #       '{content: $content}')
      
      #     # G·ª≠i th√¥ng b√°o t·ªõi Discord
      #     curl -X POST -H "Content-Type: application/json" \
      #     -d "$JSON_PAYLOAD" \
      #     $DISCORD_WEBHOOK_URL


  notify-discord:
    runs-on: ubuntu-latest
    needs: merge-main-to-test
    if: always()
    steps:
      - name: Notify Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          CONFLICT_FILES: ${{ env.conflict_files }}
          JOB_STATUS: ${{ needs.merge-main-to-test.result }}
        run: |
          if [ "$JOB_STATUS" == "failure" ]; then
            MESSAGE="üö® **Job Failed:** \`merge-main-to-test\`\n- **Status:** \`Failure\`\n- **Time:** \`$(date -u +'%Y-%m-%d %H:%M:%S UTC')\`\n\nPlease review the logs for details."
          elif [ "$JOB_STATUS" == "success" ]; then
            MESSAGE="‚úÖ **Workflow completed successfully!**\n- **Job:** \`merge-main-to-test\`\n- **Branch:** \`main\` ‚Üí \`test\`\n- **Time:** \`$(date -u +'%Y-%m-%d %H:%M:%S UTC')\`."
          else
            MESSAGE="‚ö†Ô∏è **Workflow completed with warnings.**\n- **Job:** \`merge-main-to-test\`\n- **Status:** \`$JOB_STATUS\`\n- **Branch:** \`main\` ‚Üí \`test\`\n- **Time:** \`$(date -u +'%Y-%m-%d %H:%M:%S UTC')\`\n\nPlease check the logs for details."
          fi
          if [ -n "$CONFLICT_FILES" ]; then
            echo $CONFLICT_FILES
            MESSAGE="$MESSAGE\n\nüõë **Conflicted Files:**\n\`\`\`\n$(echo $CONFLICT_FILES | tr ', ' '\n')\n\`\`\`"
          fi
          curl -X POST -H "Content-Type: application/json" \
          -d "{
            \"content\": \"$MESSAGE\"
          }" \
          $DISCORD_WEBHOOK_URL
